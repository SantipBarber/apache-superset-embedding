#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Script para probar el m√≥dulo Superset en el entorno de Paola
Adaptado para Docker Compose con puerto 9179
"""

import requests
import json
import time
import sys
import os

# Configuraci√≥n espec√≠fica del entorno de Paola
ODOO_BASE_URL = "http://localhost:9179"
DB_NAME = "test_superset"
PROJECT_PATH = "/desarrollo/0000-TEST-ODOO/odoo-test"

class PaolaEnvironmentTester:
    def __init__(self):
        self.odoo_url = ODOO_BASE_URL
        self.db_name = DB_NAME
        
    def check_odoo_accessibility(self):
        """Verificar que Odoo est√© accesible"""
        print(f"üîó Verificando Odoo en {self.odoo_url}...")
        
        try:
            response = requests.get(f"{self.odoo_url}/web/database/selector", timeout=10)
            if response.status_code == 200:
                print("‚úÖ Odoo est√° accesible")
                return True
            else:
                print(f"‚ö†Ô∏è Odoo responde con c√≥digo {response.status_code}")
                return False
        except requests.ConnectionError:
            print("‚ùå Error: No se puede conectar con Odoo")
            print("üí° Soluciones:")
            print(f"   1. cd {PROJECT_PATH}")
            print("   2. docker-compose up -d")
            print("   3. docker-compose logs -f")
            return False
        except Exception as e:
            print(f"‚ùå Error inesperado: {e}")
            return False
    
    def list_databases(self):
        """Listar bases de datos disponibles"""
        print("üóÉÔ∏è Listando bases de datos disponibles...")
        
        try:
            data = {
                'jsonrpc': '2.0',
                'method': 'call',
                'params': {
                    'service': 'db',
                    'method': 'list',
                    'args': []
                },
                'id': 1
            }
            
            response = requests.post(f"{self.odoo_url}/jsonrpc", json=data, timeout=15)
            result = response.json()
            
            if 'result' in result and isinstance(result['result'], list):
                databases = result['result']
                print(f"‚úÖ Bases de datos encontradas: {databases}")
                
                if self.db_name in databases:
                    print(f"‚úÖ Base de datos '{self.db_name}' est√° disponible")
                    return True
                else:
                    print(f"‚ö†Ô∏è Base de datos '{self.db_name}' no encontrada")
                    print(f"üí° Usa una de estas: {databases}")
                    
                    # Usar la primera disponible
                    if databases:
                        self.db_name = databases[0]
                        print(f"üîÑ Usando '{self.db_name}' para las pruebas")
                        return True
                    return False
            else:
                print("‚ö†Ô∏è No se pudieron listar las bases de datos")
                return True  # Continuar de todas formas
                
        except Exception as e:
            print(f"‚ö†Ô∏è Error listando bases de datos: {e}")
            return True  # Continuar de todas formas
    
    def test_authentication(self, username="admin", password="admin"):
        """Probar autenticaci√≥n"""
        print(f"üîë Probando autenticaci√≥n (usuario: {username})...")
        
        login_data = {
            'jsonrpc': '2.0',
            'method': 'call',
            'params': {
                'service': 'common',
                'method': 'authenticate',
                'args': [self.db_name, username, password, {}]
            },
            'id': 1
        }
        
        try:
            response = requests.post(f"{self.odoo_url}/jsonrpc", json=login_data, timeout=15)
            result = response.json()
            
            if result.get('result'):
                uid = result['result']
                print(f"‚úÖ Autenticaci√≥n exitosa (UID: {uid})")
                return uid
            else:
                print("‚ùå Error de autenticaci√≥n")
                print(f"   Respuesta: {result}")
                return None
                
        except Exception as e:
            print(f"‚ùå Error en autenticaci√≥n: {e}")
            return None
    
    def check_module_installed(self, uid):
        """Verificar si el m√≥dulo est√° instalado"""
        print("üì¶ Verificando instalaci√≥n del m√≥dulo...")
        
        try:
            data = {
                'jsonrpc': '2.0',
                'method': 'call',
                'params': {
                    'service': 'object',
                    'method': 'execute',
                    'args': [
                        self.db_name, uid, 'admin',
                        'ir.module.module',
                        'search_read',
                        [['name', '=', 'eticco_superset_integration']],
                        ['name', 'state', 'summary']
                    ]
                },
                'id': 1
            }
            
            response = requests.post(f"{self.odoo_url}/jsonrpc", json=data, timeout=15)
            result = response.json()
            
            if 'result' in result and result['result']:
                module_info = result['result'][0]
                state = module_info.get('state', 'unknown')
                print(f"‚úÖ M√≥dulo encontrado - Estado: {state}")
                
                if state == 'installed':
                    print("‚úÖ M√≥dulo est√° instalado y listo")
                    return True
                elif state == 'to install':
                    print("‚ö†Ô∏è M√≥dulo marcado para instalaci√≥n")
                    return False
                elif state == 'uninstalled':
                    print("‚ö†Ô∏è M√≥dulo no est√° instalado")
                    print("üí° Inst√°lalo desde: Apps ‚Üí Buscar 'eticco_superset_integration'")
                    return False
                else:
                    print(f"‚ö†Ô∏è Estado desconocido: {state}")
                    return False
            else:
                print("‚ùå M√≥dulo no encontrado")
                print("üí° Aseg√∫rate de que el m√≥dulo est√© en extra_addons/")
                return False
                
        except Exception as e:
            print(f"‚ùå Error verificando m√≥dulo: {e}")
            return False
    
    def test_module_functionality(self, uid):
        """Probar funcionalidad b√°sica del m√≥dulo"""
        print("üß™ Probando funcionalidad b√°sica del m√≥dulo...")
        
        try:
            # Intentar crear un registro de Analytics Hub
            data = {
                'jsonrpc': '2.0',
                'method': 'call',
                'params': {
                    'service': 'object',
                    'method': 'execute',
                    'args': [
                        self.db_name, uid, 'admin',
                        'superset.analytics.hub',
                        'create',
                        {
                            'name': 'Test Dashboard',
                            'superset_dashboard_id': '1',
                            'description': 'Dashboard de prueba'
                        }
                    ]
                },
                'id': 1
            }
            
            response = requests.post(f"{self.odoo_url}/jsonrpc", json=data, timeout=15)
            result = response.json()
            
            if 'result' in result and result['result']:
                record_id = result['result']
                print(f"‚úÖ Registro creado exitosamente (ID: {record_id})")
                
                # Probar m√©todo de obtenci√≥n de datos
                test_data = {
                    'jsonrpc': '2.0',
                    'method': 'call',
                    'params': {
                        'service': 'object',
                        'method': 'execute',
                        'args': [
                            self.db_name, uid, 'admin',
                            'superset.analytics.hub',
                            'get_dashboard_data_for_js',
                            [record_id]
                        ]
                    },
                    'id': 1
                }
                
                test_response = requests.post(f"{self.odoo_url}/jsonrpc", json=test_data, timeout=15)
                test_result = test_response.json()
                
                if 'result' in test_result:
                    print("‚úÖ M√©todo get_dashboard_data_for_js funciona")
                    
                    # Limpiar - eliminar registro de prueba
                    delete_data = {
                        'jsonrpc': '2.0',
                        'method': 'call',
                        'params': {
                            'service': 'object',
                            'method': 'execute',
                            'args': [
                                self.db_name, uid, 'admin',
                                'superset.analytics.hub',
                                'unlink',
                                [record_id]
                            ]
                        },
                        'id': 1
                    }
                    
                    requests.post(f"{self.odoo_url}/jsonrpc", json=delete_data, timeout=10)
                    print("üßπ Registro de prueba eliminado")
                    
                    return True
                else:
                    print("‚ùå Error en m√©todo get_dashboard_data_for_js")
                    return False
            else:
                print("‚ùå No se pudo crear registro de prueba")
                print(f"   Respuesta completa: {result}")
                
                # Intentar obtener m√°s detalles del error
                if 'error' in result:
                    error_info = result['error']
                    if isinstance(error_info, dict):
                        print(f"   Tipo error: {error_info.get('name', 'Unknown')}")
                        print(f"   Mensaje: {error_info.get('message', 'No message')}")
                        if 'data' in error_info and 'debug' in error_info['data']:
                            print(f"   Debug: {error_info['data']['debug']}")
                
                return False
                
        except Exception as e:
            print(f"‚ùå Error probando funcionalidad: {e}")
            return False
    
    def run_comprehensive_test(self):
        """Ejecutar test completo del entorno"""
        print("üöÄ INICIANDO TESTS COMPLETOS DEL ENTORNO DE PAOLA")
        print("=" * 70)
        print(f"üìç Proyecto: {PROJECT_PATH}")
        print(f"üåê Odoo URL: {self.odoo_url}")
        print(f"üóÉÔ∏è Base de datos: {self.db_name}")
        print("=" * 70)
        
        # Test 1: Accesibilidad de Odoo
        if not self.check_odoo_accessibility():
            print("\n‚ùå TESTS ABORTADOS: Odoo no accesible")
            return False
        
        # Test 2: Listar bases de datos
        if not self.list_databases():
            print("\n‚ùå TESTS ABORTADOS: Sin bases de datos")
            return False
        
        # Test 3: Autenticaci√≥n
        uid = self.test_authentication()
        if not uid:
            print("\n‚ùå TESTS ABORTADOS: Fallo en autenticaci√≥n")
            return False
        
        # Test 4: M√≥dulo instalado
        if not self.check_module_installed(uid):
            print("\n‚ö†Ô∏è TESTS LIMITADOS: M√≥dulo no instalado")
            print("\nüí° PR√ìXIMOS PASOS:")
            print("   1. Ir a Odoo ‚Üí Apps")
            print("   2. Buscar 'eticco_superset_integration'")
            print("   3. Hacer clic en 'Instalar'")
            print("   4. Re-ejecutar este script")
            return False
        
        # Test 5: Funcionalidad b√°sica
        if not self.test_module_functionality(uid):
            print("\n‚ùå TESTS FALLIDOS: Error en funcionalidad")
            return False
        
        # Test completo exitoso
        print("\n" + "=" * 70)
        print("‚úÖ TODOS LOS TESTS COMPLETADOS EXITOSAMENTE")
        print("=" * 70)
        print("üéØ ENTORNO LISTO PARA:")
        print("   ‚Ä¢ Tests de integraci√≥n")
        print("   ‚Ä¢ Tests de escenarios de error")
        print("   ‚Ä¢ Desarrollo y debugging")
        print("   ‚Ä¢ Pruebas de usuario final")
        
        return True


def main():
    """Funci√≥n principal"""
    if len(sys.argv) > 1 and sys.argv[1] == '--help':
        print("""
Script de tests para el entorno de Paola

DESCRIPCI√ìN:
  Verifica que el entorno Docker Compose est√© correctamente configurado
  y que el m√≥dulo eticco_superset_integration funcione correctamente.

USO:
  python3 test_paola_env.py

REQUISITOS:
  - Docker y docker-compose corriendo
  - Odoo accesible en http://localhost:9179
  - M√≥dulo en /desarrollo/0000-TEST-ODOO/odoo-test/extra_addons/

COMANDOS √öTILES:
  cd /desarrollo/0000-TEST-ODOO/odoo-test/
  docker-compose up -d          # Iniciar Odoo
  docker-compose logs -f        # Ver logs
  docker-compose down           # Detener Odoo
        """)
        return
    
    print("üîß Entorno: Paola - Docker Compose - Puerto 9179")
    print("üìÅ Proyecto: /desarrollo/0000-TEST-ODOO/odoo-test/")
    print()
    
    tester = PaolaEnvironmentTester()
    success = tester.run_comprehensive_test()
    
    if not success:
        sys.exit(1)


if __name__ == "__main__":
    main()